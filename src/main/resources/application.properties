# ==========================================
# Información de la aplicación
# ==========================================
spring.application.name=user-service
info.app.name=Auth Service
info.app.version=1.0.0
info.app.description=Microservicio de autenticación con Spring Boot


# ==========================================
# Perfil activo (para separar configs por entorno)
# ==========================================
spring.profiles.active=${SPRING_PROFILES_ACTIVE}


# ==========================================
# Puerto del servidor
# ==========================================
server.port=8080


# ==========================================
# Configuración de la base de datos
# ==========================================
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=${MYSQL_URI_PROD}
spring.datasource.username=${MYSQL_USERNAME_PROD}
spring.datasource.password=${MYSQL_PASSWORD_PROD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true


# ==========================================
# HikariCP - Pool de conexiones
# ==========================================
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.maximum-pool-size=10


# ==========================================
# Endpoints de monitoreo (Actuator)
# ==========================================
management.endpoints.web.exposure.include=health,info,metrics,prometheus,loggers
management.endpoint.prometheus.enabled=true
management.endpoint.loggers.enabled=true


# ==========================================
# Logging
# ==========================================
logging.level.root=WARN
logging.level.shop.nandoshop=INFO


# ==========================================
# Tracing con Spring Sleuth y Zipkin
# ==========================================
spring.zipkin.base-url=http://localhost:9411
spring.sleuth.sampler.probability=0.01


# ==========================================
# Circuit Breaker (Resilience4j)
# ==========================================
resilience4j.circuitbreaker.instances.userService.register-health-indicator=true

# Número de llamadas a revisar
resilience4j.circuitbreaker.instances.userService.sliding-window-size=5
# Mínimo de llamadas antes de abrir
resilience4j.circuitbreaker.instances.userService.minimum-number-of-calls=3
# % de fallas para abrir
resilience4j.circuitbreaker.instances.userService.failure-rate-threshold=50
# Tiempo antes de pasar a HALF-OPEN
resilience4j.circuitbreaker.instances.userService.wait-duration-in-open-state=10s


# ==========================================
# Configuración de Argon2 para el PasswordEncoder
# ==========================================
# Longitud del salt aleatorio en bytes.
# Protege contra ataques de rainbow tables.
# Valor recomendado: 16 bytes
security.password.argon2.salt-length=16

# Longitud del hash resultante en bytes.
# 32 bytes = 256 bits, considerado seguro.
security.password.argon2.hash-length=32

# Número de hilos que utiliza Argon2 para calcular el hash.
# Mayor paralelismo = más rápido, pero consume más memoria.
security.password.argon2.parallelism=2

# Memoria utilizada por el algoritmo en KB.
# Aumenta la dificultad de ataques por hardware especializado (GPU/ASIC).
# 65536 KB = 64 MB, balance seguro para producción.
security.password.argon2.memory=65536

# Número de iteraciones del algoritmo.
# Más iteraciones = más tiempo de cómputo = mayor seguridad.
security.password.argon2.iterations=4


# ==========================================
# Clients
# ==========================================
product.service.url=http://localhost:8081